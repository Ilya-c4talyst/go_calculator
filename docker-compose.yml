services:
  # База данных
  postgres:
    image: postgres:15-alpine
    container_name: calculator-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Сервис аутентификации (gRPC сервер + HTTP API)
  auth_service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "8081:8081" # HTTP API
      - "50051:50051" # gRPC
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - SECRETKEY=${SECRETKEY}
      - env=${env}
      - TIME_ADDITION_MS=${TIME_ADDITION_MS}
      - TIME_SUBTRACTION_MS=${TIME_SUBTRACTION_MS}
      - TIME_MULTIPLICATIONS_MS=${TIME_MULTIPLICATIONS_MS}
      - TIME_DIVISIONS_MS=${TIME_DIVISIONS_MS}
      - COMPUTING_POWER=${COMPUTING_POWER}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  # Основной сервис (HTTP API + gRPC клиент)
  main_service:
    build:
      context: ./service
      dockerfile: Dockerfile
    container_name: main-service
    restart: unless-stopped
    ports:
      - "8080:8080" # HTTP API
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - SECRETKEY=${SECRETKEY}
      - env=${env}
      - TIME_ADDITION_MS=${TIME_ADDITION_MS}
      - TIME_SUBTRACTION_MS=${TIME_SUBTRACTION_MS}
      - TIME_MULTIPLICATIONS_MS=${TIME_MULTIPLICATIONS_MS}
      - TIME_DIVISIONS_MS=${TIME_DIVISIONS_MS}
      - COMPUTING_POWER=${COMPUTING_POWER}
    depends_on:
      - postgres
      - auth_service
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge